class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # find if the nodes in the intial are in the same component, count the size of the component
        def dfs(node):
            if node in visited:
                return 0
            size = 0
            visited.add(node)
            size += 1
            for i in range(M):
                if graph[node][i] != 0:
                    size += dfs(i)
            return size

        visited = set()
        N = len(initial)
        M = len(graph)
        size = [-1] * N
        for i in range(N):
            if initial[i] not in visited:
                size[i] = dfs(initial[i])
                for j in range(i + 1, N):
                    if size[j] == -1 and initial[j] in visited:
                        size[i], size[j] = 0, 0
        m_size = 0
        for j in range(N):
            if size[j] > size[m_size]:
                m_size = j
            elif size[j] == size[m_size]:
                if initial[j] < initial[m_size]:
                    m_size = j
        return initial[m_size]


# Use disjoint set
